#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 18 09:51:36 2018

@author: billy
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, LabelEncoder

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
df = pd.read_csv("splice.data.txt",
    names=["Class", "Instance", "Sequence"])

df.head()#checking out data
df.describe()#check description


Y = df['Class']
Y.groupby(Y).count()
le = LabelEncoder()
le.fit(Y)
# record the label encoder mapping
le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
y = le.transform(Y)

le_name_mapping #look 

y.shape #look

df['Instance'][:20] #chekcing the instances.

df['Instance'].sample(20, random_state=0)

def find_letters(row):
    return set(row.strip())

set_series = df['Sequence'].apply(find_letters)

set.union(*set_series)#find unique, show unique

set_series[set_series.str.contains('N', regex=False)]#looking at other letters

df.loc[107].Sequence.strip()

df['Sequence'].str.strip().map(len).unique() #checking The dataset claims that every row has 60 characters (30 before and 30 after the possible splice. Let’s check to make sure that’s true.

letter_mapping = {'A': 0, 'C': 1, 'G': 2, 'T': 3, 'D': 4, 'N': 5, 'R': 6, 'S': 7}

def convert_base_to_num(bases):
    return [letter_mapping[letter] for letter in bases.strip()]

df['Sequence_list'] = df['Sequence'].apply(convert_base_to_num)

df['Sequence_list'].head() #converted the letters to integers. 

X_sequence = np.array(df['Sequence_list'].values.tolist())#split those lists so that each individual integer is in its own column. To do that we’ll convert the pandas series into an ndarray. 
# Because we have 7 different categories (‘A’, ‘C’, ‘D’, ‘G’, ‘N’, ‘R’, ‘S’, and ‘T’),

encoder = OneHotEncoder(n_values=len(letter_mapping))
X_encoded = encoder.fit_transform(X_sequence)
X_one_hot = X_encoded.toarray()

#X = np.append(X_donor, X_sequence, axis=1)
X = X_one_hot
np.save('dna_cleaner.npy', X)
np.save('dna_clean_labels', y)

X = np.load('dna_cleaner.npy')
y = np.load('dna_clean_labels.npy')